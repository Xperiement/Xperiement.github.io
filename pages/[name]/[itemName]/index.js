import React, { useState, useEffect } from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";

export default function category({ logo, acc, items = [] }) {
  const router = useRouter();
  const [mState, setMState] = useState(items);
  const [oState, setOState] = useState(mState.length !== 0 ? mState[0] : []);

  const doSelect = (name) => {
    const route = router.asPath;
    const prevRoute = route.substring(0, route.lastIndexOf("/"));
    //router.back();
    //router.replace(`${prevRoute}/${name}`);
    router.replace(`${prevRoute}/${name}`, undefined, { shallow: false });
  };

  return (
    <div>
      <Head>
        <title>{router.query.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css"
          rel="stylesheet"
        />
      </Head>

      <main>
        <div className={`sideBar ${acc}`}>
          <i className={logo}></i>
          <p className="sideHead">{router.query.name}</p>

          <div className="list">
            {mState.map((item) => (
              <div
                key={item.name}
                className={`item ${item.selected && "active"}`}
                onClick={() => doSelect(item.name)}
              >
                {item.name}
              </div>
            ))}
          </div>
        </div>
        <section className="subCategorySection">
          <h1>Category</h1>
          <div className="listCategory">
            {oState.options.map((item) => (
              <Link href={`${router.asPath}/${item.name}`}>
                <div key={item.name} className={`item ${acc}`}>
                  <i className={`${item.logo} usetxt`}></i>
                  <p>{item.name}</p>
                </div>
              </Link>
            ))}
          </div>
        </section>
      </main>
    </div>
  );
}

export async function getStaticProps(context) {
  const { name, itemName } = context.params;
  const URL = "https://raw.githubusercontent.com/epicX67/md_blogs/main";

  const sUrl = `${URL}/categories/${name}.json`;

  const sRes = await fetch(sUrl);
  const sData = await sRes.json();

  const { logo, acc } = sData.configs;

  const items = sData.items.map((item) => ({
    ...item,
    selected: itemName === item.name ? true : false,
  }));

  return {
    props: {
      itemName: itemName,
      items: items,
      logo: logo,
      acc: acc,
      key: itemName,
    },
  };
}

export async function getStaticPaths() {
  const URL = "https://raw.githubusercontent.com/epicX67/md_blogs/main";
  const mUrl = `${URL}/DB.json`;
  const res = await fetch(mUrl);
  const data = await res.json();

  const names = data.map((item) => item);

  let paths = [];

  for (let i = 0; i < names.length; i++) {
    const cUrl = `${URL}/categories/${names[i].name.toLowerCase()}.json`;
    const cRes = await fetch(cUrl);
    const cData = await cRes.json();

    const items = cData.items.map((item) => item);
    for (let j = 0; j < items.length; j++) {
      paths.push({
        params: {
          name: names[i].name.toLowerCase(),
          itemName: items[j].name,
        },
      });
    }
  }

  return {
    paths,
    fallback: false,
  };
}
