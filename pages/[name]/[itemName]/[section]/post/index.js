import Head from "next/head";
import { useRouter } from "next/router";
import ReactMarkdown from "react-markdown";
import gfm from "remark-gfm";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { atomDark } from "react-syntax-highlighter/dist/cjs/styles/prism";

const components = {
  code({ node, inline, className, children, ...props }) {
    const match = /language-(\w+)/.exec(className || "");
    return !inline && match ? (
      <SyntaxHighlighter
        style={atomDark}
        language={match[1]}
        PreTag="div"
        children={String(children).replace(/\n$/, "")}
        {...props}
      />
    ) : (
      <code className={className} {...props} />
    );
  },
};

const source = `
![Ncloud - Highly scalable NAS](https://github.com/project-ncloud/get_started/raw/main/logo.png)

## Requirements

- Ubuntu/Raspbian or any Linux distro
- Some Packages
- Some Storage

## Check for Dependencies

Open terminal and paste below code.

> bash <(curl -s https://raw.githubusercontent.com/project-ncloud/get_started/main/check_compatibility.sh)

If you see all the are green that means everything is available to setup **Ncloud**.
Otherwise you will have to run below command.

> bash <(curl -s https://raw.githubusercontent.com/project-ncloud/get_started/main/init_ubuntu.sh)

## Setup NCloud

Before start setup, We will suggest you to make a separate folder. Then open terminal in that directory. After that do all the operations.

#### Setup Master Server

> bash <(curl -s https://raw.githubusercontent.com/project-ncloud/get_started/main/setup_master.sh)

#### Setup Node Server

> sudo bash <(curl -s https://raw.githubusercontent.com/project-ncloud/get_started/main/setup_master.sh)

#### Setup NCloud Front-end

> bash <(curl -s https://raw.githubusercontent.com/project-ncloud/get_started/main/setup_ncloud.sh)

##### Note:

> While setup master server, it will asks for admin pasword. Make sure you remember it. It will be required while you setup node_server in other nodes as well as in current node where master server is placed.

## Run Server

You will have to run three different servers for ncloud.
To run each one of them you will have to goto that directory and paste following codes.

#### Master Server

> bash start.sh

#### Node Server

> sudo bash start.sh

#### Ncloud Server

> bash start.sh

~~~js
declare module 'react-syntax-highlighter/dist/cjs/styles/prism/hopscotch' {
  const style: any;
  export default style;
}

declare module 'react-syntax-highlighter/dist/cjs/styles/prism/material-dark' {
  const style: any;
  export default style;
}

declare module 'react-syntax-highlighter/dist/cjs/styles/prism/material-light' {
  const style: any;
  export default style;
}
~~~

## At last

Thank you for trying. Give us star if you like our project.
            `;

const source2 = `
~~~js
const router = useRouter();
~~~

`;

export default function Section({
  posts,
  itemName,
  section,
  acc = "blue",
  logo = "ri-dashboard-fill",
}) {
  const router = useRouter();
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css"
          rel="stylesheet"
        />
      </Head>

      <main>
        <div className={`subSideBar ${acc}`}>
          <button>
            <i className={logo}></i>
          </button>
          <div></div>

          <button
            className={`backButton ${acc}Btn`}
            onClick={() => {
              router.back();
            }}
          >
            <i className="ri-arrow-go-back-fill"></i>
          </button>
        </div>
        <section className="markDownSection">
          <ReactMarkdown
            components={components}
            className="markdown"
            children={source}
            remarkPlugins={[[gfm, { singleTilde: false }]]}
          />
        </section>
      </main>
    </div>
  );
}

// export async function getStaticProps(context) {
//   const { name, itemName, section } = context.params;
//   const URL = "https://raw.githubusercontent.com/epicX67/md_blogs/main";

//   const mUrl = `${URL}/categories/${name}/${itemName}/${section}/posts.json`;
//   const sUrl = `${URL}/categories/${name}.json`;

//   const res = await fetch(mUrl);
//   const posts = await res.json();

//   const sRes = await fetch(sUrl);
//   const sData = await sRes.json();

//   const sItem = sData.items.find((item) => itemName === item.name);
//   const logo = sItem.options.find((item) => item.name === section).logo;

//   return {
//     props: {
//       posts: posts,
//       itemName: itemName,
//       section: section,
//       logo: logo,
//       acc: sData.configs.acc,
//     },
//   };
// }

// export async function getStaticPaths() {
//   const URL = "https://raw.githubusercontent.com/epicX67/md_blogs/main";
//   const mUrl = `${URL}/DB.json`;
//   const res = await fetch(mUrl);
//   const data = await res.json();

//   const names = data.map((item) => item);

//   let paths = [];

//   for (let i = 0; i < names.length; i++) {
//     const cUrl = `${URL}/categories/${names[i].name.toLowerCase()}.json`;
//     const cRes = await fetch(cUrl);
//     const cData = await cRes.json();

//     const items = cData.items.map((item) => item);
//     for (let j = 0; j < items.length; j++) {
//       for (let k = 0; k < items[j].options.length; k++) {
//         //const sUrl = `${URL}/categories/${names[i]}/${items[j].options[k].name}/posts.json`;

//         paths.push({
//           params: {
//             name: names[i].name.toLowerCase(),
//             itemName: items[j].name,
//             section: items[j].options[k].name,
//           },
//         });
//       }
//     }
//   }

//   return {
//     paths,
//     fallback: false,
//   };
// }
