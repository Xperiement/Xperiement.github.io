import React, { useState } from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";

export default function category({ configs, items }) {
  const router = useRouter();
  const [mState, setMState] = useState(items);
  const [oState, setOState] = useState(mState[0] !== null ? mState[0] : []);

  const doSelect = (name) => {
    // Updating Selection list
    const nState = mState.map((item) => ({
      ...item,
      selected: item.name === name ? true : false,
    }));
    setMState(nState);

    // Updating catagory list
    const onState = nState.filter((item) => item.name === name);
    setOState(onState[0]);
  };

  return (
    <div>
      <Head>
        <title>{router.query.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css"
          rel="stylesheet"
        />
      </Head>

      <main>
        <div className={`sideBar ${configs.acc}`}>
          <i className={configs.logo}></i>
          <p className="sideHead">{router.query.name}</p>

          <div className="list">
            {mState.map((item) => (
              <div
                key={item.name}
                className={`item ${item.selected && "active"}`}
                onClick={() => doSelect(item.name)}
              >
                {item.name}
              </div>
            ))}
          </div>
        </div>
        <section className="subCategorySection">
          <h1>Category</h1>
          <div className="listCategory">
            {oState.options.map((item) => (
              <Link href={`${router.asPath}/${oState.name}/${item.name}`}>
                <div key={item.name} className={`item ${configs.acc}`}>
                  <i className={`${item.logo} usetxt`}></i>
                  <p>{item.name}</p>
                </div>
              </Link>
            ))}
          </div>
        </section>
      </main>
    </div>
  );
}

export async function getStaticProps(context) {
  const url = `https://raw.githubusercontent.com/epicX67/md_blogs/main/categories/${context.params.name}.json`;

  const res = await fetch(url);
  const data = await res.json();

  let cItems = data.items.map((item) => ({ ...item, selected: false }));
  cItems[0].selected = true;

  return {
    props: { configs: data.configs, items: cItems },
  };
}

export async function getStaticPaths() {
  const url = `https://raw.githubusercontent.com/epicX67/md_blogs/main/DB.json`;
  const res = await fetch(url);
  const data = await res.json();

  const names = data.map((item) => item.name.toLowerCase());
  const paths = names.map((name) => ({
    params: {
      name: name,
    },
  }));

  return {
    paths,
    fallback: false,
  };
}
